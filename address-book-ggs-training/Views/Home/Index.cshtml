@using address_book_ggs_training.Models
@model ContactViewModel
@{
    ViewBag.Title = "Address Book";
}

<div class="row">
    <div class="col-md-3">
        <h2>Contact list</h2>

        <ul class="list-group">
            @{
                foreach (address_book_ggs_training.Entities.ContactShort c in ViewBag.Contacts)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <span class="material-icons">face</span>
                        <span class="btn btn-light float-left">@c.Name @c.Lastname</span>
                        <span class="btn btn-danger float-right material-icons" onclick="removeContact(@c.Id)">delete_forever</span>
                    </li>
                }
            }
        </ul>
    </div>

    <div class="col-md-9">
        <h2>Contact details</h2>
        <div>
            @using (Html.BeginForm("Save", "Home", null, FormMethod.Post, new { @class = "", role = "form" }))
            {
                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Name)
                            @Html.TextBoxFor(m => m.Name, (string)ViewBag.Contact.Name, new { @class = "form-control", ariaDescribedby = "nameHelp", placeholder = "Enter name" })
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            @Html.LabelFor(m => m.Lastname)
                            @Html.TextBoxFor(m => m.Lastname, (string)ViewBag.Contact.Lastname, new { @class = "form-control", ariaDescribedby = "lastNameHelp", placeholder = "Enter last name" })
                        </div>
                    </div>
                </div>

                <div id="divNumber">
                    @{
                        for (int i = 0; i < ViewBag.Contact.Numbers.Count; i++)
                        {
                            <div class="row">
                                <div class="col">
                                    @Html.Label("phone_" + i, "Phone number")
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Type</button>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" href="#">Home</a>
                                                <a class="dropdown-item" href="#">Mobile</a>
                                                <a class="dropdown-item" href="#">Work</a>
                                            </div>
                                        </div>
                                        @Html.TextBox("phone_" + i, (string)ViewBag.Contact.Numbers[i].Number, new { @class = "form-control", ariaDescribedby = "phoneHelp", placeholder = "Enter phone number" })
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>

                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary float-right" onClick="createNumber()">Add number</button>
                    </div>
                </div>

                <div id="divEmail">
                    @{
                        for (int i = 0; i < ViewBag.Contact.Emails.Count; i++)
                        {
                            <div class="row">
                                <div class="col">
                                    @Html.Label("email", "Email address")
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Type</button>
                                            <div class="dropdown-menu">
                                                <a class="dropdown-item" href="#">Personal</a>
                                                <a class="dropdown-item" href="#">Work</a>
                                            </div>
                                        </div>
                                        @Html.TextBox("email", (string)ViewBag.Contact.Emails[i].Email, new { @class = "form-control", ariaDescribedby = "emailHelp", placeholder = "Enter email address" })
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary float-right" onClick="createEmail()">Add e-mail</button>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            @Html.Label("streetAddress", "Street address")
                            @Html.TextBox("streetAddress", (string)ViewBag.Contact.Address, new { @class = "form-control", ariaDescribedby = "streetAddressHelp", placeholder = "Enter street address" })
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            @Html.Label("cityAddress", "City")
                            @Html.TextBox("cityAddress", null, new { @class = "form-control", ariaDescribedby = "cityAddressHelp", placeholder = "Enter city" })
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-group">
                            @Html.Label("stateAddress", "State")
                            @Html.TextBox("stateAddress", null, new { @class = "form-control", ariaDescribedby = "stateAddressHelp", placeholder = "Enter state" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            @Html.Label("birth", "Birthdate")
                            @Html.TextBox("birth", null, new { @class = "form-control", ariaDescribedby = "birthHelp", type = "date", placeholder = "Enter date of birth" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            @Html.LabelFor(m => m.WebSite)
                            @Html.TextBoxFor(m => m.WebSite, (string)ViewBag.Contact.WebSite, new { @class = "form-control", ariaDescribedby = "websiteHelp", placeholder = "Enter website" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        @Html.Label("avatar", "Avatar")
                        <div class="input-group mb-3">
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="avatar">
                                @Html.Label("avatar", "Choose an image", new { @class = "custom-file-label" })
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <button class="btn btn-primary float-right" onClick="createCustom()">Add custom field</button>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <div class="form-group">
                            @Html.CheckBox("shared")
                            @Html.Label("shared", "Shared contact")
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col">
                        <button class="btn btn-success">Save</button>
                    </div>
                    <div class="col">
                        <button class="btn btn-light" onclick="autofill()">Autofill</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<script>
    function createNumber() {
        $('#divNumber').append(`
                        <div class="row">
                            <div class="col">
                                @Html.Label("phone", "Phone number")
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Type</button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item" href="#">Home</a>
                                            <a class="dropdown-item" href="#">Mobile</a>
                                            <a class="dropdown-item" href="#">Work</a>
                                        </div>
                                    </div>
                                    @Html.TextBox("phone", null, new { @class = "form-control", ariaDescribedby = "phoneHelp", placeholder = "Enter phone number" })
                                </div>
                            </div>
                        </div>
            `   );
    }

    function createEmail() {
        $('#divEmail').append(`
                        <div class="row">
                            <div class="col">
                                @Html.Label("email", "Email address")
                                <div class="input-group mb-3">
                                    <div class="input-group-prepend">
                                        <button class="btn btn-outline-secondary dropdown-toggle" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">Type</button>
                                        <div class="dropdown-menu">
                                            <a class="dropdown-item" href="#">Personal</a>
                                            <a class="dropdown-item" href="#">Work</a>
                                        </div>
                                    </div>
                                    @Html.TextBox("email", null, new { @class = "form-control", ariaDescribedby = "emailHelp", placeholder = "Enter email address" })
                                </div>
                            </div>
                        </div>
            `   );
    }

    function createCustom() {
        $('#divCustom').append(`
                        <div class="row">
                            <div class="col">
                                <div class="form-group">
                                    @Html.Label("custom", "Custom field")
                                    <div class="input-group mb-3">
                                        <div class="input-group-prepend">
                                            @Html.TextBox("custom", null, new { @class = "form-control", ariaDescribedby = "customTypeHelp", placeholder = "Enter field type" })
                                        </div>
                                        @Html.TextBox("custom", null, new { @class = "form-control", ariaDescribedby = "customValueHelp", placeholder = "Enter field value" })
                                    </div>
                                </div>
                            </div>
                        </div>
            `   );
    }

    function removeContact(id) {
        console.log("Removing contact id ", id);
        $.ajax({
            type: "POST",
            url: '@Url.Action("Remove", "Contacts")',
            contentType: "application/json; charset=utf-8",
            data: { contactId: id },
            dataType: "json",
            success: function(recData) { alert(resData); },
            error: function() { alert('A error'); }
        });
    }

    function autofill() {
        $("#name").val(generateRandomName());
        $("#lastName").val(generateRandomLastName());
        $('input', $('#divNumber')).each(function () {
            $(this).val(generateRandomPhoneNumber());
        });
        $("#email").val(generateRandomMailAddress());
        $("#streetAddress").val(generateRandomStreetAddress());
        $("#cityAddress").val(generateRandomCity());
        $("#stateAddress").val("Italia");
        $("#birth").val((generateRandomBirthday()));
    }

    function generateRandomName() {
        const names = ["Francesco", "Leonardo", "Alessandro", "Lorenzo", "Mattia", "Andrea", "Gabriele", "Matteo", "Tommaso", "Sofia", "Giulia", "Aurora", "Alice", "Ginevra", "Emma", "Giorgia","Greta","Martina"];
        return names[Math.floor(Math.random() * names.length)];
    }

    function generateRandomLastName() {
        const lastnames = ["Rossi", "Ferrari", "Russo", "Bianchi", "Esposito", "Colombo", "Romano", "Ricci", "Gallo", "Greco", "Conti", "Marino", "Bruno", "Costa", "Barbieri", "Moretti", "Rizzo", "Fontana"];
        return lastnames[Math.floor(Math.random() * lastnames.length)];
    }

    function generateRandomPhoneNumber() {
        var fixedPrefix = "+39 ";
        return fixedPrefix +  formatPhoneNumber(Math.random().toString().slice(2, 11));
    }

    function formatPhoneNumber(s) {
        return s.toString().replace(/\d{3}(?=.)/g, '$& ');
    }

    function generateRandomMailAddress() {
        var chars = 'abcdefghijklmnopqrstuvwxyz';
        return chars[Math.floor(Math.random()*26)] + Math.random().toString(36).substring(2,11) + "@@gmail.com";
    }

    function generateRandomStreetAddress() {
        var chars = 'abcdefghijklmnopqrstuvwxyz';
        return "Via " + chars[Math.floor(Math.random() * 26)] + Math.random().toString(36).substring(2, 11) + " " + Math.random().toString().slice(2, 4);
    }

    function generateRandomCity() {
        var cities = {
            'AG': 'Agrigento',
            'AL': 'Alessandria',
            'AN': 'Ancona',
            'AO': 'Aosta',
            'AR': 'Arezzo',
            'AP': 'Ascoli Piceno',
            'AT': 'Asti',
            'AV': 'Avellino',
            'BA': 'Bari',
            'BT': 'Barletta-Andria-Trani',
            'BL': 'Belluno',
            'BN': 'Benevento',
            'BG': 'Bergamo',
            'BI': 'Biella',
            'BO': 'Bologna',
            'BZ': 'Bolzano',
            'BS': 'Brescia',
            'BR': 'Brindisi',
            'CA': 'Cagliari',
            'CL': 'Caltanissetta',
            'CB': 'Campobasso',
            'CI': 'Carbonia-Iglesias',
            'CE': 'Caserta',
            'CT': 'Catania',
            'CZ': 'Catanzaro',
            'CH': 'Chieti',
            'CO': 'Como',
            'CS': 'Cosenza',
            'CR': 'Cremona',
            'KR': 'Crotone',
            'CN': 'Cuneo',
            'EN': 'Enna',
            'FM': 'Fermo',
            'FE': 'Ferrara',
            'FI': 'Firenze',
            'FG': 'Foggia',
            'FC': 'Forlì-Cesena',
            'FR': 'Frosinone',
            'GE': 'Genova',
            'GO': 'Gorizia',
            'GR': 'Grosseto',
            'IM': 'Imperia',
            'IS': 'Isernia',
            'SP': 'La Spezia',
            'AQ': 'L\'Aquila',
            'LT': 'Latina',
            'LE': 'Lecce',
            'LC': 'Lecco',
            'LI': 'Livorno',
            'LO': 'Lodi',
            'LU': 'Lucca',
            'MC': 'Macerata',
            'MN': 'Mantova',
            'MS': 'Massa-Carrara',
            'MT': 'Matera',
            'ME': 'Messina',
            'MI': 'Milano',
            'MO': 'Modena',
            'MB': 'Monza e della Brianza',
            'NA': 'Napoli',
            'NO': 'Novara',
            'NU': 'Nuoro',
            'OT': 'Olbia-Tempio',
            'OR': 'Oristano',
            'PD': 'Padova',
            'PA': 'Palermo',
            'PR': 'Parma',
            'PV': 'Pavia',
            'PG': 'Perugia',
            'PU': 'Pesaro e Urbino',
            'PE': 'Pescara',
            'PC': 'Piacenza',
            'PI': 'Pisa',
            'PT': 'Pistoia',
            'PN': 'Pordenone',
            'PZ': 'Potenza',
            'PO': 'Prato',
            'RG': 'Ragusa',
            'RA': 'Ravenna',
            'RC': 'Reggio Calabria',
            'RE': 'Reggio Emilia',
            'RI': 'Rieti',
            'RN': 'Rimini',
            'RM': 'Roma',
            'RO': 'Rovigo',
            'SA': 'Salerno',
            'VS': 'Medio Campidano',
            'SS': 'Sassari',
            'SV': 'Savona',
            'SI': 'Siena',
            'SR': 'Siracusa',
            'SO': 'Sondrio',
            'TA': 'Taranto',
            'TE': 'Teramo',
            'TR': 'Terni',
            'TO': 'Torino',
            'OG': 'Ogliastra',
            'TP': 'Trapani',
            'TN': 'Trento',
            'TV': 'Treviso',
            'TS': 'Trieste',
            'UD': 'Udine',
            'VA': 'Varese',
            'VE': 'Venezia',
            'VB': 'Verbano-Cusio-Ossola',
            'VC': 'Vercelli',
            'VR': 'Verona',
            'VV': 'Vibo Valentia',
            'VI': 'Vicenza',
            'VT': 'Viterbo',
        };

        return cities[randomKey(cities)];
    }

    function randomKey(obj) {
        var ret;
        var c = 0;
        for (var key in obj)
            if (Math.random() < 1 / ++c)
                ret = key;
        return ret;
    }

    function generateRandomBirthday() {
        var fromDate = new Date();
        fromDate.setFullYear(fromDate.getFullYear() - 100);
        var toDate = new Date();
        var resultDate = new Date(fromDate.getTime() + Math.random() * (toDate.getTime() - fromDate.getTime()));
        return formatDate(resultDate);
    }

    function formatDate(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2)
            month = '0' + month;
        if (day.length < 2)
            day = '0' + day;

        return [year, month, day].join('-');
    }
</script>